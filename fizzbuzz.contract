' Tick (apostrophe) to Tick, or Tick to EOL are comments in Contract.
' Sharpwords are Contract's metavalues.
' The sharpwords #true and #false are Contracts' true and false values.
' The sharpword #undefined is Contract's null value.
' Braces define precedence.
' is is Contract's assignment.
' need imports a Contract library. It returns a namespace from which you can call functions.
' unary is Contract's arity 1 lambda. Functions are first-class in Contract.
' if is binary. It evaluates the POST expression, and returns PRE if #true or #undefined if #false.
' but is binary. If POST is #undefined, it returns PRE, otherwise it returns POST.
' to is binary. It takes an int PRE and an int POST and returns an array of int from PRE to POST inclusive.
' map is binary. It takes an array PRE and a function POST and returns an array, where POST has been applied to each value in PRE.
' each is binary. It takes an array PRE and a function POST returns PRE. POST is applied to each value in PRE. It is assumed POST will have side effects.

s is need "stdio".
l is need "lists".

fizzbuzz is unary {
  {{POST
  but "buzz" if {POST mod 5} equals 0}
  but "fizz" if {POST mod 3} equals 0}
  but "fizzbuzz" if {POST mod 15} equals 0
}.

s:println l:each fizzbuzz l:map 1 l:to 100.
